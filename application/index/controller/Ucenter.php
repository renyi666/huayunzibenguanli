<?php
/**
 * Created by 高远
 * Date: 2016/10/20
 * Time: 15:23
 */

namespace app\index\controller;


use app\index\model\AuthGroup;
use app\index\model\AuthGroupUser;
use app\index\model\Message;
use app\index\model\ProjectStage;
use think\Controller;
use think\Db;
use think\Request;
use think\Session;

class Ucenter extends Controller
{

    public function _initialize()
    {


        parent::_initialize(); // TODO: Change the autogenerated stub

    }

    public function login()
    {


        return $this->fetch();
    }

    public function check($mobile, $password)
    {

        $ucenterM = new     \app\index\model\Ucenter();
        $request = Request::instance();
        $list = $request->param();
        if ($request->isAjax()) {

            $result = $ucenterM->login($list);

            return $result;
        }


    }

    public function getProjectStage()
    {
        $projectStage = new         ProjectStage();
        $project = new         \app\index\model\Project();

        $project_stage_data = $projectStage->getAll();
        foreach ($project_stage_data as $key => $value) {

            $project_stage_data[$key]['number'] = count($project->where("stage_id=" . ($key + 1))->select());


        }

        $this->assign('projectStage', $project_stage_data);

    }

    public function logout()
    {

        Session::clear();

        $this->redirect('login');


    }

    public function index()
    {
        $base = new Base();
        $base->_initialize();
        $this->isLogin();
        $this->getUser();

        $ucenterM = new  \app\index\model\Ucenter();
        $list = $ucenterM->getAll();
        $userInfo=session('user');

        $message_action['to'] =  $userInfo['id'];


        $message_action['stage_id'] =  array('neq', 0);

        $messageM   =  new Message();

        $message_stage_result  =   $messageM->getlist($message_action);

        unset($message_action['stage_id']);
        $message_action['stage_id'] =  array('eq', 0);
        $message_project_result  =   $messageM->getlist1($message_action);



        $this->assign('messagestageLog',$message_stage_result);
        $this->assign('messageproLog',$message_project_result);

        $map['id'] = array('neq', 1);
        $data = $ucenterM->where($map)->select();


        $this->assign('ucenter_data', $data);


        $this->assign('list', $list);
        return $this->fetch();
    }

    //用户注册
    public function register()
    {
        $ucenterM = new \app\index\model\Ucenter();
        $request = Request::instance();
        $list = $request->param();

        if ($request->isAjax()) {


            $result = $ucenterM->register($list);


            if ($result == "1") {

                $data = array(
                    'status' => 1,
                    'info' => "注册成功"
                );

            } else {

                $data = $result;
            }

        }
        return $data;
    }

    public function change()
    {
        $userInfo = session('user');

        $ucenterM = new \app\index\model\Ucenter();
        $request = Request::instance();
        $list = $request->param();
        if ($request->isAjax()) {

            $where['id'] = $list['user_id'];

            if ($list['status'] == 1) {
                $data['status'] = 0;
            } else {
                $data['status'] = 1;
            }
            if ($where['id'] == 1) {

                $data1 = "-1";        //超级管理员不能禁用
            } elseif ($userInfo['id'] == $where['id']) {

                $data1 = "-2";        //当前自己用户不能禁用
            } else {
                $result = $ucenterM->where($where)->update($data);
                if ($result == 1) {
                    $data1 = "1";         //修改成功

                } else {
                    $data1 = "0";         //修改失败
                }


            }

        }
        return $data1;
    }

    //用户是否已经登录，假如登录获得用户信息


    public function getUser()
    {
        $userInfo = session('user');

        $this->assign('userInfo', $userInfo);
    }

    public function isLogin()
    {

        $userInfo = session('user');

        if ($userInfo !== null && is_numeric($userInfo['id'])) {

            return true;

        } else {
            $this->redirect('Ucenter/login');
        }

    }

    public function editUcenter()
    {

        $ucenterM = new \app\index\model\Ucenter();
        $request = Request::instance();
        $list = $request->param();
        $where['id'] = $list['id'];
        $where2['user_id'] = $list['id'];

        $return_result = $ucenterM->where($where)->find();

        //如果上级为空，则说明是管理员
        if ($list['remark'] == "null") {


            $list['remark'] = 1;

        }

        //启动事务
        Db::startTrans();
        $result_ucenter = $ucenterM->Update($list);


        //返回值不是1 ，则更新失败
        if ($result_ucenter != 1) {

            Db::rollback();
            return $this->errorReturn($this->showError(-30000));

        }


        //如果为空就说明上级没改变
        if ($list['remark'] == $return_result['remark']) {

        } else {


            //以前的直系上级
            $previous_remark['user_id'] = $return_result['remark'];

            //现在的直系上级
            $now_remark['user_id'] = $list['remark'];

            $authGroupUserM = new AuthGroupUser();
            $authGroupM = new AuthGroup();
            //以前的上级所属分组
            $authUser_result = $authGroupUserM->where($previous_remark)->find();
            $authGroup['id'] = $authUser_result['group_id'];
            //以前的直属上级的权限级别
            $authGroup_result = $authGroupM->where($authGroup)->find();

            //现在的直系上级权限
            $authUser_result1 = $authGroupUserM->where($now_remark)->find();
            $authGroup1['id'] = $authUser_result1['group_id'];

            $authGroup_result1 = $authGroupM->where($authGroup1)->find();

            //现在的上级order和以前的上级比较
            $compare_order_result = $authGroup_result['order'] - $authGroup_result1['order'];
            $resultt = $authGroup_result1['order'] + 1;


            $where11['order'] = $resultt;
            $resulttt = $authGroupM->where($where11)->find();
            //修改用户的group_id
            $where_now_ucenter['group_id'] = $resulttt['id'];

            //更新authgroupuser表里的修改用户的group_id
            $where8['user_id'] = $list['id'];


            $result_ucenter1 = $authGroupUserM->where($where8)->update($where_now_ucenter);

            //把以前上级的underling所属删除该用户id,假如上级的underling为空，则不操作
            if ($authUser_result['underling'] != null && $authUser_result['underling'] != "") {


                $auth_group_result_user['underling'] = $authUser_result['underling'];
                //把underling里的数据id删除


                $auth_group_result_user = explode(',', $auth_group_result_user['underling']);

                foreach ($auth_group_result_user as $key3 => $value) {

                    if ($value == $list['id']) {

                        $auth_group_result_user[$key3] == "";

                        unset($auth_group_result_user[$key3]);
                    }
                }

                $auth_group_result_user = implode(',', $auth_group_result_user);

                $auth_group_result_user_update['underling'] = $auth_group_result_user;


                //更新以前上级的数据
                $result_ucenter22 = $authGroupUserM->where($previous_remark)->update($auth_group_result_user_update);

                if ($result_ucenter22 != 1) {

                    Db::rollback();
                    return $this->errorReturn($this->showError(-30000));

                }


            }

            //更新现在上级的underling
            if ($authUser_result1['underling'] != null && $authUser_result1['underling'] != "") {

                $auth_group_result_user1['underling'] = $authUser_result1['underling'] . "," . $list['id'];

                //更新现在上级的数据
                $result_ucenter3 = $authGroupUserM->where($now_remark)->update($auth_group_result_user1);

                if ($result_ucenter3 != 1) {

                    Db::rollback();
                    return $this->errorReturn($this->showError(-30000));

                }

            }

            //更新级别的升降级

            $auth_group_all = $authGroupM->select();

            $number = count($auth_group_all);
            $number_result = $number - $authGroup_result['order'];

            $auth_result = $authGroupUserM->where($where2)->find();


            $data_result1 = $auth_result['underling'];

            $auth_result['underling'] = explode(',', $auth_result['underling']);

            $data_result = $auth_result['underling'];
            $delete_data['id'] = $list['id'];
            $key = array_search($data_result, $delete_data);
            array_splice($data_result, $key, 1);

            $data_fin = [];


            for ($k = 0; $k < $number_result; $k++) {

                foreach ($data_result as $i => $v) {
                    $map['user_id'] = $v;


                    $auth_result_fin = $authGroupUserM->where($map)->find();

                    $data_result1 = $data_result1 . "," . $auth_result_fin['underling'];


                    $data_fin[$i] = $data_result = $auth_result_fin['underling'];

                    $data_fin[$i] = explode(',', $data_fin[$i]);


                    if ($data_fin[$i] != null) {
                        $key = array_search($data_fin[$i], $map);
                        array_splice($data_fin[$i], $key, 1);


                    }

                    $data_fin[$i] = implode(',', $data_fin[$i]);


                }


                $data_fin = array_unique($data_fin);
                $data_fin = array_filter($data_fin);
                $data_result = $data_fin;


            }

            $data_result1 = explode(',', $data_result1);
            $data_result1 = array_unique($data_result1);
            $data_result1 = array_filter($data_result1);


            $key1 = array_search($data_result1, $where2);
            array_splice($data_result1, $key1, 1);


            $data_result1 = implode(',', $data_result1);

            $where6['user_id'] = array('in', $data_result1);
            $auth_geoup_user = $authGroupUserM->where($where6)->select();

            foreach ($auth_geoup_user as $key12 => $value333) {

                $where7['id'] = $value333['group_id'];
                $result1 = $authGroupM->where($where7)->find();

                //根据$compare_order_result判断升降级
                if ($compare_order_result > 0) {


                    $where88['order'] = $result1['order'] + $compare_order_result;
                } else {
                    $where88['order'] = $result1['order'] - $compare_order_result;
                }


                $result2 = $authGroupM->where($where88)->find();
                $result33['group_id'] = $result2['id'];
                $where122['user_id'] = $value333['id'];
                $authGroupUserM->where($where122)->update($result33);

            }

        }


        Db::commit();
        $data['status'] = "success";
        $data['msg'] = "成功";
        return $data;

    }
}