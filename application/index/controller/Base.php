<?php
/**
 * Created by 高远
 * Date: 2016/11/1
 * Time: 13:18
 */


namespace app\index\controller;


use app\index\model\AuthGroup;
use app\index\model\AuthGroupUser;
use app\index\model\Category;
use app\index\model\Investment;
use app\index\model\Log;
use app\index\model\LogType;
use app\index\model\Menu;
use app\index\model\Organization;
use app\index\model\Priority;
use app\index\model\Project;
use app\index\model\ProjectStage;
use app\index\model\Province;
use think\Controller;
use think\Session;

class Base extends Controller
{
    protected $pages = 1;
    protected $total = 0;
    protected $nowPage = 1;
    protected $pageSize = 10;

    protected $msg = 'success';
    protected $error = '0';
    protected $result = array(
        'msg' => 'success',
        'status' => 'success',
        'result' => ''
    );




//控制器启动时自动运行是否登录和检测菜单权限
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->isLogin();
        $this->getAuth();
        //调用省份
        $this->getProvince();
        //调用投资阶段
        $this->getInvestment();
        //调用分类
        $this->getCategory();
        //调用项目类别
        $this->getProjectStage();
        $this->getPriority();
        $this->getUser();
        $this->getOrganzition();
        $this->getLog();
        $this->getsuper();

    }

    public function isLogin()
    {

        $userInfo = session('user');

        if ($userInfo !== null && is_numeric($userInfo['id'])) {

            return true;

        } else {
            $this->redirect('Ucenter/login');
        }

    }

    public function successReturn($msg = 'success')
    {
        if (is_string($msg)) {
            $this->result['msg'] = $msg;
        }
        if (is_array($msg)) {
            $this->result['result'] = $msg;
        }
        if (is_object($msg)) {
            $this->result['result'] = $msg;
        }
        return $this->result;
    }


    public function showError($code = 0)
    {
        $error = 'error';
        switch ($code) {
            case -10001:
                $error = '暂无相关数据';
                break;
            case -10000:
                $error = '未知错误';
                break;
            case -10002:
                $error = '数据未更新';
                break;
            case -20001:
                $error = '用户不存在！';
                break;
            case -20002:
                $error = '手机号错误';
                break;
            case -20003:
                $error = '密码不能为空';
                break;
            case -20004:
                $error = '手机号已注册';
                break;
            case -20005:
                $error = '第三方授权错误';
                break;
            case -20006:
                $error = '您已授权，请直接登录';
                break;
            case -20007:
                $error = '密码错误';
                break;
            case -20008:
                $error = '请指定有效用户';
                break;
            case -20009:
                $error = '无效的openid';
                break;
            case -20010:
                $error = '验证码或密码错误';
                break;
            case -40003:
                $error = '用户无效';
                break;

            case  -30000:
                $error = "用户编辑更新失败";
                break;
            case -60002:
                $error = '验证码1小时有效，请勿重复获取';
                break;

            case -70001:
                $error = '请选择有效的图片';
                break;
            default:
                $error = 'data not find';
        }
        return $error;
    }

    public function withPage($list)
    {
        if (is_object($list)) {
            $this->result['result'] = $list->all();
            $this->result['total'] = $list->total();
            $this->result['page_size'] = $list->listRows();
            $this->result['page'] = $list->currentPage();
            $this->result['pages'] = $list->lastPage();
            return $this->result;
        } else {
            return $this->errorReturn();
        }
    }


    //二维数组去重

    public function unique($charge)
    {

        foreach ($charge as $v) {

            $v = join(',', $v);  //降维,也可以用implode,将一维数组转换为用逗号连接的字符串

            $temp[] = $v;

        }

        $temp = array_unique($temp);    //去掉重复的字符串,也就是重复的一维数组

        foreach ($temp as $k => $v) {

            $temp[$k] = explode(',', $v);   //再将拆开的数组重新组装

        }
        return $temp;

    }

    public function logout()
    {

        Session::clear();

        $this->redirect('Ucenter/login');


    }

    //获取权限
    public function getAuth()
    {

        $userInfo = session('user');
        $authGroupM = new AuthGroup();
        $authGroupUserM = new AuthGroupUser();

        $result = $authGroupUserM->getGroupId($userInfo['id']);

        $rules_result = $authGroupM->getRules($result);


        session('rules_result', $rules_result);

        //和menu表对比  获取数据

        $menuM = new Menu();


        $menu_result = $menuM->getMenu($rules_result);

        $this->assign('menu_result', $menu_result);

        $rules_result = explode(',', $rules_result);

        $menu_auth = ['1', '2', '3', '4', '7', '8'];
        foreach ($menu_auth as $k => $value) {
            if (in_array($value, $rules_result)) {

                $menu_auth[$k] = "1";
            } else {
                $menu_auth[$k] = "2";


            }

        }

        $this->assign('menu_res', $menu_auth);

//        return $menu_result;

    }

    public function getUser()
    {
        $userInfo = session('user');

        $this->assign('userInfo', $userInfo);

    }

    //  筛选所有省份
    public function getProvince()
    {

        $province = new  Province();

        $province_data = $province->getAll();
        $this->assign('province', $province_data);

    }


    //筛选投资阶段
    public function getInvestment()
    {

        $investment = new  Investment();
        $investment_data = $investment->getAll();
        $this->assign('investment', $investment_data);
    }

    //筛选分类
    public function getCategory()
    {

        $category = new  Category();
        $category_data = $category->getAll();

        $this->assign('category', $category_data);


    }

    //筛选项目阶段
    public function getProjectStage()
    {
        $projectStage = new        ProjectStage();
        $project = new         Project();

        $project_stage_data = $projectStage->getAll();
        foreach ($project_stage_data as $key => $value) {

            $project_stage_data[$key]['number'] = count($project->where("stage_id=" . ($value['id']))->where("status=1")->select());


        }


        $this->assign('projectStage', $project_stage_data);

    }

    //筛选优先级
    public function getPriority()
    {

        $priority = new     Priority();
        $priority_data = $priority->getAll();
        $this->assign('priority', $priority_data);

    }

    public function getProject()
    {

        $project = new        Project();
        $project_data = $project->getAll();
        $this->assign('project', $project_data);

    }

    //获取机构名称
    public function getOrganzition()
    {

        $organzitionM = new Organization();
        $result = $organzitionM->getOrganization();
        $this->assign('organization', $result);


    }

    public function errorReturn($msg = 'fail')
    {
        $result['status'] = "fail";
        if (is_string($msg)) {
            $result['msg'] = $msg;
        }
        if (is_array($msg)) {
            $result['result'] = $msg;
        }
        if (is_object($msg)) {
            $result['result'] = $msg;
        }
        return $result;
    }

    //获得日报
    public function getLog()
    {
        $logTypeM = new LogType();
        $result = $logTypeM->getAll();
        $this->assign('logtype', $result);


    }

    /**
     * 获得所有上级id
     */
    public function getsuper()
    {

        $userInfo = session('user');
        $where['user_id'] = $userInfo['id'];

        $authGroupUserM = new AuthGroupUser();
        $authGroupM = new AuthGroup();
        $userGroupUserResult = $authGroupUserM->getOneUser($where);

        unset($where);
        $where['id'] = $userGroupUserResult['group_id'];
        $userGroupResult = $authGroupM->getByOrder($where);

        unset($where);
        $where['order'] = $userGroupResult['order'];
        // 获得所有等级比自己高的用户所属的group_id
        $supGroupIdResult = $authGroupM->getAllUserByOrder($where);
        if($supGroupIdResult==0){

            $supResult=0;
        }else{

            //获得的数据就是上级的用户
            $supResult = $authGroupUserM->getALLByGroupId($supGroupIdResult);
        }



        session('supresult',$supResult);


    }

}



